<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
<!-- 두가지 방식으로 돌아감 intercept와 filter 방식 -->
<bean id="loginSuccess" class="com.kh.mvc.LoginSuccessHandler"/>
<bean id="customAccessDenied" class="com.kh.mvc.CustomAccessDeniedHandler"/>
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

<context:component-scan base-package="com.kh.mvc"/>
<bean id="memberService" class="com.kh.mvc.model.service.MemberService"/>

<security:http>                              <!--누구를 접근시킬 것인가   -->
    <security:intercept-url pattern="/all" access="permitAll"/>
    <security:intercept-url pattern="/member" access="hasAnyRole('ROLE_MEMBER', 'ROLE_ADMIN')"/> <!-- 관리자도 멤버이기 때문에 포함  여러개 등록 할 땐hasAnyRole -->
    <security:intercept-url pattern="/admin" access="hasRole('ROLE_ADMIN')"/>
   <security:form-login login-page="/login" authentication-success-handler-ref="loginSuccess"/> <!-- <security:form-login/> : security가 제공하는 로그인 페이지 이다. 만약 내가 원하는 디자인으로 로그인 화면 하고 싶으면 login-page="/login" -->
   
   <security:csrf disabled="true"/>
   <security:logout logout-url="/logout" invalidate-session="true"/>                 <!--핸들러 지정 authentication-success-handler-ref : 로그인 후 내가 원하는 페이지 로 갈 경우
                                                                                            클래스 만든 후 빈 등록 후 쓸 수 잇음   -->
<!--    <security:access-denied-handler error-page="/error"/>--><!-- 1.접근 거부하는 핸들러 지정, jsp로 보내는거라 빈등록 필요 없음 (member로 로그인해서 관리자페이지로 접근할 때) -->
    <security:access-denied-handler ref="customAccessDenied"/><!-- 2.접근 거부하는 핸들러 지정, 핸들러 클래스 만든 후 그거 참조하는 방법. 빈등록 후 사용 -->
</security:http>

<security:authentication-manager> <!-- 입증 매니저  -->
 <security:authentication-provider user-service-ref="memberService">
  <!-- <security:user-service> 
      <security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
      <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>
   </security:user-service> -->
   <security:password-encoder hash="bcrypt"/>
 </security:authentication-provider>
</security:authentication-manager>





</beans>
<!-- namespace에서 security 체크 해주기, web.xml에도 등록 하기(*-context.xml) -->
